In this article we will separate the internal game logic from the user interface logic.

What does 'internal game logic' mean? It basically means that we take everything that conceptually belongs to the game not caring about how this is eventually presented to the user. In our chess example, we can think of chess as being a game that consists of a board, some pieces and rules. This is true for every chess game. Whether it is presented with physical game pieces on a table or on a computer screen using drag and drop or via a command line interface makes no difference. We would still require the same board, pieces and rules.

In our case the game board is not presented as such. However it exists implicitly in the form of locations that are stored in each piece and the rules that are enforced.

And why do we need to separate the user interface logic from the game logic? Well, there are several reasons to do so:
<ul>
<li> <b>Rule enforcement</b> is a lot easier to implement, as we can program the rules using an appropriate representation of the game (e.g. we do not have to worry about x/y coordinates).
<li> It is a lot easier to <b>change the current user interface</b> as we do not have to worry about breaking the underlying game.
<li> <b>Creating alternative user interfaces</b> becomes a lot simpler as we can reuse the complete internal game logic.
<li> It is much easier and faster to develop an <b>artificial intelligence</b> based on an internal game representation than working straight on the user interface.
<li> Keeping meaningful <b>logs</b> and presenting game <b>statistics</b> becomes easier
</ul>

But there are also disadvantages:
<ul>
<li> Translating between the user interface and an internal game representation is <b>more difficult</b>.
</ul>

We will add two new classes. The first represent the games internal state and the rules. The second represents a game piece. Let's have a look at the game piece class first. In the previous article a piece consisted of an image representing the piece, the x and y coordinates where to display the piece, the color and the type. We will split this class in two classes. One for the internal representation and one for the GUI. For the internal representation we will need the color and type. We also need to know where the piece is. This can be done in various ways. We will keep it simple and add a column and row variable to the piece. We could also have created something (a new class or a two dimensional array, etc.) to represent the board, but let's keep it simple for now. We also introduce the concept of capturing pieces. Therefore another variable is introduces into the piece class which indicates if the piece has been captured or not. You could also think of this as a piece state instead of a game state. For ease of use will define it as a Boolean variable.

[sourcecode language="java"]
public class Piece {
	private int color;
	public static final int COLOR_WHITE = 0;
	public static final int COLOR_BLACK = 1;

	private int type;
	public static final int TYPE_ROOK = 1;
	public static final int TYPE_KNIGHT = 2;
	public static final int TYPE_BISHOP = 3;
	public static final int TYPE_QUEEN = 4;
	public static final int TYPE_KING = 5;
	public static final int TYPE_PAWN = 6;

	//Chess is played on a square board of
	//eight rows (denoted with numbers 1 to 8 )
	//and eight columns (denoted with letters a to h)
	private int row;

	public static final int ROW_1 = 0;
	public static final int ROW_2 = 1;
	public static final int ROW_3 = 2;
	public static final int ROW_4 = 3;
	public static final int ROW_5 = 4;
	public static final int ROW_6 = 5;
	public static final int ROW_7 = 6;
	public static final int ROW_8 = 7;

	private int column;

	public static final int COLUMN_A = 0;
	public static final int COLUMN_B = 1;
	public static final int COLUMN_C = 2;
	public static final int COLUMN_D = 3;
	public static final int COLUMN_E = 4;
	public static final int COLUMN_F = 5;
	public static final int COLUMN_G = 6;
	public static final int COLUMN_H = 7;

	private boolean isCaptured = false;
	 // ..
 }
[/sourcecode]

For the user interface we will use a reference to the underlying internal representation and the image and coordinates of that image.

[sourcecode language="java"]
public class GuiPiece {

	private Image img;
	private int x;
	private int y;
	private Piece piece;

	//..
}
[/sourcecode]

To convert between the x and y coordinates used in the user interface and the columns and rows used in the internal representation, several helper methods were created.

[sourcecode language="java"]
public class ChessGui extends JPanel {
       //..
	/**
	 * convert logical column into x coordinate
	 * @param column
	 * @return x coordinate for column
	 */
	public static int convertColumnToX(int column){
		return PIECES_START_X + SQUARE_WIDTH * column;
	}

	/**
	 * convert logical row into y coordinate
	 * @param row
	 * @return y coordinate for row
	 */
	public static int convertRowToY(int row){
		return PIECES_START_Y + SQUARE_HEIGHT * row;
	}

	/**
	 * convert x coordinate into logical column
	 * @param x
	 * @return logical column for x coordinate
	 */
	public static int convertXToColumn(int x){
		return (x - DRAG_TARGET_SQUARE_START_X)/SQUARE_WIDTH;
	}

	/**
	 * convert y coordinate into logical row
	 * @param y
	 * @return logical row for y coordinate
	 */
	public static int convertYToRow(int y){
		return (y - DRAG_TARGET_SQUARE_START_Y)/SQUARE_HEIGHT;
	}
	//..
[/sourcecode]

These functions are used, for example, for displaying and resetting the images in the user interface.

[sourcecode language="java"]
public class GuiPiece {
       //..
	public GuiPiece(Image img, Piece piece) {
		this.img = img;
		this.piece = piece;

		this.resetToUnderlyingPiecePosition();
	}

	/**
	 * move the gui piece back to the coordinates that
	 * correspond with the underlying piece's row and column
	 */
	public void resetToUnderlyingPiecePosition() {
		this.x = ChessGui.convertColumnToX(piece.getColumn());
		this.y = ChessGui.convertRowToY(piece.getRow());
	}
	//..
}
[/sourcecode]

The internal representation of the game itself with the game state and all the pieces, is put into a new class called ChessGame. This class contains mainly the logic for setting up the game and moving pieces. It also provides methods for getting information about the games current state and the location of pieces. Note that it does not contain any information about the user interface and does not contain any dependencies to the GUI classes.

[sourcecode language="java"]
public class ChessGame {

	private int gameState = GAME_STATE_WHITE;
	public static final int GAME_STATE_WHITE = 0;
	public static final int GAME_STATE_BLACK = 1;

	// 0 = bottom, size = top
	private List<Piece> pieces = new ArrayList<Piece>();

	/**
	 * initialize game
	 */
	public ChessGame(){

		// create and place pieces
		// rook, knight, bishop, queen, king, bishop, knight, and rook
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_ROOK, Piece.ROW_1, Piece.COLUMN_A);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_KNIGHT, Piece.ROW_1, Piece.COLUMN_B);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_BISHOP, Piece.ROW_1, Piece.COLUMN_C);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_QUEEN, Piece.ROW_1, Piece.COLUMN_D);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_KING, Piece.ROW_1, Piece.COLUMN_E);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_BISHOP, Piece.ROW_1, Piece.COLUMN_F);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_KNIGHT, Piece.ROW_1, Piece.COLUMN_G);
		createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_ROOK, Piece.ROW_1, Piece.COLUMN_H);

		// pawns
		int currentColumn = Piece.COLUMN_A;
		for (int i = 0; i < 8; i++) {
			createAndAddPiece(Piece.COLOR_WHITE, Piece.TYPE_PAWN, Piece.ROW_2, currentColumn);
			currentColumn++;
		}

		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_ROOK, Piece.ROW_8, Piece.COLUMN_A);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_KNIGHT, Piece.ROW_8, Piece.COLUMN_B);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_BISHOP, Piece.ROW_8, Piece.COLUMN_C);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_QUEEN, Piece.ROW_8, Piece.COLUMN_D);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_KING, Piece.ROW_8, Piece.COLUMN_E);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_BISHOP, Piece.ROW_8, Piece.COLUMN_F);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_KNIGHT, Piece.ROW_8, Piece.COLUMN_G);
		createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_ROOK, Piece.ROW_8, Piece.COLUMN_H);
		
		// pawns
		currentColumn = Piece.COLUMN_A;
		for (int i = 0; i < 8; i++) {
			createAndAddPiece(Piece.COLOR_BLACK, Piece.TYPE_PAWN, Piece.ROW_7, currentColumn);
			currentColumn++;
		}
	}

	/**
	 * create piece instance and add it to the internal list of pieces
	 * 
	 * @param color on of Pieces.COLOR_..
	 * @param type on of Pieces.TYPE_..
	 * @param row on of Pieces.ROW_..
	 * @param column on of Pieces.COLUMN_..
	 */
	private void createAndAddPiece(int color, int type, int row, int column) {
		Piece piece = new Piece(color, type, row, column);
		this.pieces.add(piece);
		this.movePiece(piece,row,column);
	}

	/**
	 * Move piece to the specified location. If the target location is occupied
	 * by an opponent piece, that piece is marked as 'captured'
	 * @param piece the piece to move
	 * @param row the target row (Piece.ROW_..)
	 * @param column the target column (Piece.COLUMN_..)
	 */
	public void movePiece(Piece piece, int row, int column) {
		//check if the move is capturing an opponend piece
		int opponentColor = (piece.getColor()==Piece.COLOR_BLACK?Piece.COLOR_WHITE:Piece.COLOR_BLACK);
		if( isNonCapturedPieceAtLocation(opponentColor,row,column)){
			Piece opponentPiece = getNonCapturedPieceAtLocation(row,column);
			opponentPiece.isCaptured(true);
		}
		
		piece.setRow(row);
		piece.setColumn(column);
	}

	/**
	 * returns the first piece at the specified location that is not marked
	 * as 'captured'.
	 * @param row one of Piece.ROW_..
	 * @param column one of Piece.COLUMN_..
	 * @return the first not captured piece at the specified location
	 */
	private Piece getNonCapturedPieceAtLocation(int row, int column) {
		for (Piece piece : this.pieces) {
			if( piece.getRow() == row
					&& piece.getColumn() == column
					&& piece.isCaptured() == false ){
				return piece;
			}
		}
		return null;
	}

	/**
	 * Checks whether there is a piece at the specified location that is not
	 * marked as 'captured' and has the specified color.
	 * @param color one of Piece.COLOR_..
	 * @param row one of Piece.ROW_..
	 * @param column on of Piece.COLUMN_..
	 * @return true, if the location contains a not-captured piece of the
	 *         specified color
	 */
	private boolean isNonCapturedPieceAtLocation(int color, int row, int column) {
		for (Piece piece : this.pieces) {
			if( piece.getRow() == row
					&& piece.getColumn() == column
					&& piece.isCaptured() == false
					&& piece.getColor() == color){
				return true;
			}
		}
		return false;
	}

	/**
	 * @return current game state (one of ChessGame.GAME_STATE_..)
	 */
	public int getGameState() {
		return this.gameState;
	}

	/**
	 * @return the internal list of pieces
	 */
	public List<Piece> getPieces() {
		return this.pieces;
	}

	/**
	 * switches the game state from ChessGame.GAME_STATE_WHITE to
	 * ChessGame.GAME_STATE_BLACK and vice versa.
	 */
	public void changeGameState() {
		switch (this.gameState) {
			case GAME_STATE_BLACK:
				this.gameState = GAME_STATE_WHITE;
				break;
			case GAME_STATE_WHITE:
				this.gameState = GAME_STATE_BLACK;
				break;
			default:
				throw new IllegalStateException("unknown game state:" + this.gameState);
		}
	}

}
[/sourcecode]

The old ChessGui class has been adapted to use the new ChessGame class. Creating the game and pieces has become a lot simpler now.

[sourcecode language="java"]
public class ChessGui extends JPanel {

       //..
	public ChessGui() {
		//..

		// create chess game
		this.chessGame = new ChessGame();

		//wrap game pieces into their graphical representation
		for (Piece piece : this.chessGame.getPieces()) {
			createAndAddGuiPiece(piece);
		}
	}

	/**
	 * create a game piece
	 *
	 * @param color color constant
	 * @param type type constant
	 * @param x x position of upper left corner
	 * @param y y position of upper left corner
	 */
	private void createAndAddGuiPiece(Piece piece) {
		Image img = this.getImageForPiece(piece.getColor(), piece.getType());
		GuiPiece guiPiece = new GuiPiece(img, piece);
		this.guiPieces.add(guiPiece);
	}
	
	/**
	 * switches between the different game states 
	 */
	public void changeGameState() {
		this.chessGame.changeGameState();
		this.lblGameState.setText(this.getGameStateAsText());
	}
	//..
}
[/sourcecode]

The only thing that got a lot more complicated is the conversion between coordinates on the screen and the locations used by the internal game classes. However once it is done, we are a lot more flexible.

[sourcecode language="java"]
public class ChessGui extends JPanel {

       //..
	/**
	 * convert logical column into x coordinate
	 * @param column
	 * @return x coordinate for column
	 */
	public static int convertColumnToX(int column){
		return PIECES_START_X + SQUARE_WIDTH * column;
	}

	/**
	 * convert logical row into y coordinate
	 * @param row
	 * @return y coordinate for row
	 */
	public static int convertRowToY(int row){
		return PIECES_START_Y + SQUARE_HEIGHT * (Piece.ROW_8 - row);
	}

	/**
	 * convert x coordinate into logical column
	 * @param x
	 * @return logical column for x coordinate
	 */
	public static int convertXToColumn(int x){
		return (x - DRAG_TARGET_SQUARE_START_X)/SQUARE_WIDTH;
	}

	/**
	 * convert y coordinate into logical row
	 * @param y
	 * @return logical row for y coordinate
	 */
	public static int convertYToRow(int y){
		return Piece.ROW_8 - (y - DRAG_TARGET_SQUARE_START_Y)/SQUARE_HEIGHT;
	}

	/**
	 * change location of given piece, if the location is valid.
	 * If the location is not valid, move the piece back to its original
	 * position.
	 * @param dragPiece
	 * @param x
	 * @param y
	 */
	public void setNewPieceLocation(GuiPiece dragPiece, int x, int y) {
		int targetRow = ChessGui.convertYToRow(y);
		int targetColumn = ChessGui.convertXToColumn(x);

		if( targetRow < Piece.ROW_1 || targetRow > Piece.ROW_8 || targetColumn < Piece.COLUMN_A || targetColumn > Piece.COLUMN_H){
			// reset piece position if move is not valid
			dragPiece.resetToUnderlyingPiecePosition();

		}else{
			//change model and update gui piece afterwards
			System.out.println("moving piece to "+targetRow+"/"+targetColumn);
			this.chessGame.movePiece(
					dragPiece.getPiece().getRow(), dragPiece.getPiece().getColumn()
					, targetRow, targetColumn);
			dragPiece.resetToUnderlyingPiecePosition();
		}
	}
	//..
}
[/sourcecode]

That's it. In the next article we will show one of the benefits of the new code structure by implementing a console based user interface on top of our internal game logic classes.

Resources:

The source code (eclipse project): coming soon
The chess icons come from: <a href="http://ixian.com/chess/jin-piece-sets/">http://ixian.com/chess/jin-piece-sets/</a>